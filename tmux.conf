unbind C-b
set -g prefix C-a

# Synchronize panes
bind-key * set-window-option synchronize-pane

# Start window and pane indices at 1.
set -g base-index 1
set -g pane-base-index 1

# Renumber windows when a window is closed
set-option -g renumber-windows on

# Decoration (256-color)
set-option -g status-position bottom
set-option -g status-justify left
set-option -g status-left '#[fg=white]#S'
set-option -g status-left-length 16
set-option -g status-bg colour237
set-option -g status-right '#[fg=white]»» #{cpu_percentage}  #(date "+%a %b %d %H:%M")'
set-option -g status-interval 60

set-option -g pane-active-border-style fg=colour240
set-option -g pane-border-style fg=colour238
set -g pane-active-border-style fg=white

set-window-option -g window-status-format '#[fg=white] #I #[fg=white] #W#F'
set-window-option -g window-status-current-format '#[fg=colour215] #I#[fg=colour167] #W#F'

# window title
set-option -g set-titles on
set-option -g set-titles-string '#S:#I.#P #W' # window number,program name,active (or not)

# Reload tmux conf.
unbind r
bind r source-file ~/.tmux.conf\; display "Reloaded conf."

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n 'C-\' if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Key bindings
# prefix c
bind-key c new-window -c "#{pane_current_path}"

# clear screen
bind-key C-l send-keys 'C-l'

# splits with current path
unbind %
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -c "#{pane_current_path}"
bind-key c new-window -c "#{pane_current_path}"

# autofocus
set -g focus-events on

# upgrade $TERM
set -g default-terminal "screen-256color"

# Make copy / paste work by enabling Applications in terminal may access clipboard in iterm2 setting

# Mouse resize pane
set -g mouse on

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

#Plugins
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'jbnicolai/tmux-fpp'
set -g @plugin 'tmux-plugins/tmux-cpu'

set -g @resurrect-restore 'L'

# Automatic session backup
set -g @continuum-restore 'on'

#Tmux Plugin Manager
run '~/.tmux/plugins/tpm/tpm'
